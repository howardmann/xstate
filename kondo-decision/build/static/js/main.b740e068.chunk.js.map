{"version":3,"sources":["stateMachines/actionMachine.js","components/IssueCard.js","components/IssueList.js","App.js","serviceWorker.js","index.js"],"names":["actionMachine","Machine","id","initial","context","status","comment","states","on","SUBMIT","CLOSE","ADD_COMMENT","load","target","cond","ctx","isNew","isInProgress","isResolved","isOnHold","isNotDoing","new","APPROVE","REJECT","HOLD","entry","assign","inProgress","RESOLVED","actions","onHold","notDoing","resolved","type","email","MainButton","action","send","style","margin","backgroundColor","color","onClick","UpdateButton","RejectButton","marginLeft","CommentInput","cols","rows","placeholder","autoFocus","IssueCard","data","handleStatusChange","issue","useMachine","withContext","current","React","useEffect","padding","name","assignee","matches","textAlign","marginRight","value","alert","initialData","sortByStatus","sortRank","sortBy","el","IssueList","useState","issues","setIssues","map","filter","key","length","marginTop","App","float","clear","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b740e068.chunk.js","sourcesContent":["import {Machine, assign} from 'xstate'\n\nconst isNew = (ctx) => ctx.status === 'New'\nconst isInProgress = (ctx) => ctx.status === 'In Progress'\nconst isResolved = (ctx) => ctx.status === 'Resolved'\nconst isOnHold = (ctx) => ctx.status === 'On Hold'\nconst isNotDoing = (ctx) => ctx.status === 'Not Doing'\n\n\nconst actionMachine = Machine({\n  id: 'machine',\n  initial: 'status',\n  context: {\n    status: 'New',\n    comment: ''\n  },\n  states: {\n    comment: {\n      on: {\n        SUBMIT: '#machine.status',\n        CLOSE: 'status'\n      }\n    },\n    status: {\n      initial: 'load',\n      on: {\n        ADD_COMMENT: 'comment'\n      },\n      states: {\n        load: {\n          on: {\n            \"\": [{\n                target: 'new',\n                cond: ctx => isNew(ctx)\n              },\n              {\n                target: 'inProgress',\n                cond: ctx => isInProgress(ctx)\n              },\n              {\n                target: 'resolved',\n                cond: ctx => isResolved(ctx)\n              },\n              {\n                target: 'onHold',\n                cond: ctx => isOnHold(ctx)\n              },\n              {\n                target: 'notDoing',\n                cond: ctx => isNotDoing(ctx)\n              }\n            ]\n          }\n        },\n        new: {\n          on: {\n            APPROVE: '#machine.email',\n            REJECT: 'notDoing',\n            HOLD: 'onHold'\n          },\n          entry: assign({\n            status: 'New'\n          })\n        },\n        inProgress: {\n          on: {\n            REJECT: 'notDoing',\n            HOLD: 'onHold',\n            RESOLVED: {\n              target: '#machine.comment',\n              actions: assign({\n                status: 'Resolved'\n              })\n            }\n          },\n          entry: assign({\n            status: 'In Progress'\n          })\n        },\n        onHold: {\n          on: {\n            APPROVE: '#machine.email',\n            REJECT: 'notDoing'\n          },\n          entry: assign({\n            status: 'On Hold'\n          })\n        },\n        notDoing: {\n          on: {\n            APPROVE: '#machine.email',\n            HOLD: 'onHold'\n          },\n          entry: assign({\n            status: 'Not Doing'\n          })\n        },\n        resolved: {\n          type: 'final',\n          entry: assign({\n            status: 'Resolved'\n          })\n        }\n      }\n    },\n    email: {\n      on: {\n        CLOSE: 'status',\n        SUBMIT: {\n          target: 'status',\n          actions: assign({\n            status: 'In Progress'\n          })\n        }\n      }\n    }\n  }\n});\n\n\nexport default actionMachine","import React from 'react';\nimport {useMachine} from '@xstate/react'\nimport actionMachine from '../stateMachines/actionMachine'\n\n// const initialData = {\n//   name: 'Excessive operation',\n//   status: 'In Progress',\n//   assignee: 'bill'\n// }\n\nconst getColor = (status) => {\n  const colorIndex = {\n    \"New\": 'lightcyan',\n    \"In Progress\": 'lightgreen',\n    \"On Hold\": 'lightgoldenrodyellow',\n    \"Resolved\": 'lawngreen',\n    \"Not Doing\": 'lightgrey'    \n  }\n  return colorIndex[status]\n}\n\nconst MainButton = ({action, send}) => {\n  return (\n    <span style={{margin: '0px 8px'}}>\n      <button style={{backgroundColor: 'green', color: 'white'}} onClick={() => send(action)}>✨{action}✨</button>\n    </span>    \n  )\n}\n\nconst UpdateButton = ({send}) => {\n  return (\n    <span style={{margin: '0px 8px'}}>\n      <button style={{backgroundColor: 'blue', color: 'white'}} \n      onClick={() => send('ADD_COMMENT')}>👋 UPDATE</button>\n    </span>    \n  )\n}\n\nconst RejectButton = ({send}) => {\n  return (\n    <button \n      style={{backgroundColor: 'gainsboro', marginLeft: '5px'}}\n      onClick={() => send('REJECT')}\n    >\n        👎 REJECT\n    </button>\n  )  \n}\n\nconst SmallButton = ({action, send}) => {\n  return (\n    <span style={{marginLeft: '5px'}}>\n      <button style={{fontSize: '8px'}} onClick={() => send(action)}>{action}</button>\n    </span>    \n  )\n}\n\nconst CommentInput = ({send}) => {\n  return (\n    <div style={{backgroundColor: 'lightblue'}}>\n      <p>Add Comment</p>\n      <textarea id=\"\" cols=\"30\" rows=\"4\" placeholder=\"Enter comment\" autoFocus></textarea>\n      <p>\n        <button onClick={() => send('SUBMIT')}>ADD COMMENT</button>\n      </p>      \n      <p>\n        <button onClick={() => send('CLOSE')}>🔙</button>        \n      </p>\n    </div>\n  )\n}\n\nconst IssueCard = ({data, handleStatusChange}) => {\n  const issue = data\n  // xState machine with initial context of issue status\n  const [current, send] = useMachine(actionMachine.withContext({status: issue.status, comment: ''}))\n\n  // Update React State when change to xState context\n  React.useEffect(() => {\n    handleStatusChange({id: issue.id, status: current.context.status})\n    // setIssue({...issue, status: current.context.status})\n  }, [current.context.status])\n\n  // Boot xState on load. Sets context to status based on initial context\n  // React.useEffect(() => {\n  //   send('INIT')\n  // })\n\n\n  return (\n    <div style={{backgroundColor: getColor(issue.status), padding: '8px', margin: '4px'}}>\n      <p>Name: {issue.name} | {issue.id}</p>\n      <p>Assignee: {issue.assignee}</p> \n      <p>Status: {issue.status}</p>\n\n      {/* <small>\n        <p>current.value: {JSON.stringify(current.value)}</p>\n        <p>current.context: {JSON.stringify(current.context)}</p>\n      </small>       */}\n\n      {current.matches('status.new') &&\n        <div style={{textAlign: 'right'}}>\n          <RejectButton send={send}/>          \n          <MainButton action=\"APPROVE\" send={send}/>\n        </div>\n      }\n\n      {current.matches('status.inProgress') &&\n        <div style={{textAlign: 'right'}}>\n          <UpdateButton send={send}/>\n\n          <button \n            style={{backgroundColor: 'green', color: 'white', marginRight: '5px'}}\n            onClick={() => send('RESOLVED')}\n          >\n              ✔️ RESOLVE\n          </button>\n\n          \n        </div>\n      }\n\n      {current.matches('status.onHold') &&\n        <div style={{textAlign: 'right'}}>\n          <RejectButton send={send}/>\n          <MainButton action=\"APPROVE\" send={send}/>\n        </div>\n      }\n\n      {current.matches('status.notDoing') &&\n        <div style={{textAlign: 'right'}}>\n          <button \n            onClick={() => send('HOLD')}\n            style={{backgroundColor: 'palegoldenrod'}}\n          >\n            ✋ON HOLD\n          </button>\n          <MainButton action=\"APPROVE\" send={send}/>\n        </div>\n      }      \n\n      {current.matches('comment') &&\n        <div>\n          <CommentInput send={send}/>\n        </div>\n      }\n\n      {current.matches('email') && \n        <div style={{backgroundColor: 'lightgreen'}}>\n          <h2>Send Email</h2>\n          <p>To:</p>\n          <p><input type=\"email\" value={issue.email}/></p>\n          <p>Cc:</p>\n          <p><input type=\"email\" value=\"engineering@cim.io\"/></p>\n          <p>Subject:</p>\n          <p><input type=\"text\" value={issue.name}/></p>\n          <p>Body:</p>\n          <textarea cols=\"30\" rows=\"5\" placeholder=\"Leave a comment\"></textarea>\n          <p>                                  \n            <button onClick={() => {\n              send('SUBMIT')\n              alert('📧 Email Sent')\n            }}>📧 SUBMIT</button>\n          </p>\n          <p>\n            <button onClick={() => send('CLOSE')}>🔙</button>            \n          </p>\n\n        </div>\n      }\n\n    </div>\n  )\n}\n\nexport default IssueCard","import React from 'react';\nimport IssueCard from './IssueCard'\nimport {sortBy} from 'lodash';\n\nconst initialData = [\n  {\n    id: '1',\n    name: 'Excessive operation',\n    status: 'New',\n    assignee: 'bill',\n    email: 'bill@email.com'\n  },\n  {\n    id: '2',\n    name: 'Status Mismatch',\n    status: 'New',\n    assignee: 'bob',\n    email: 'bob@email.com'\n  },\n  {\n    id: '3',\n    name: 'Food court open',\n    status: 'New',\n    assignee: 'jane',\n    email: 'jane@email.com'\n  },\n  {\n    id: '4',\n    name: 'Magic mountain',\n    status: 'Resolved',\n    assignee: 'billy',\n    email: 'billy@email.com'\n  },\n  {\n    id: '5',\n    name: 'Turn gas office',\n    status: 'Not Doing',\n    assignee: 'jason',\n    email: 'jason@email.com'\n  },\n  {\n    id: '6',\n    name: 'Stage 4 Restriction',\n    status: 'On Hold',\n    assignee: 'teddy',\n    email: 'teddy@email.com'\n  },\n  {\n    id: '7',\n    name: 'Stage 3 Restriction',\n    status: 'Resolved',\n    assignee: 'pope',\n    email: 'pope@email.com'\n  },\n  {\n    id: '8',\n    name: 'AHU CO2 sensor replace',\n    status: 'New',\n    assignee: 'karen',\n    email: 'karen@email.com'\n  },\n  {\n    id: '9',\n    name: 'Tenant complaint',\n    status: 'Resolved',\n    assignee: 'tell',\n    email: 'tell@email.com'\n  }\n\n]\n\nconst sortByStatus = (data) => {\n  const sortRank = {\n    \"New\": 1,\n    \"In Progress\": 2,\n    \"On Hold\": 3,\n    \"Resolved\": 4,\n    \"Not Doing\": 5\n  }\n\n  return sortBy(data, function(el){\n    return sortRank[el.status]\n  })\n}\n\n\nconst IssueList = ({data = initialData}) => {\n  // React Issue State\n  const [issues, setIssues] = React.useState(data)\n  \n  const handleStatusChange = ({id, status}) => {\n    setIssues(\n      issues.map(issue => {\n        if(issue.id === id){\n          return {...issue, status}\n        }\n        return issue\n      }))\n  }\n\n  const hasNew = () => {\n    return issues.filter(el => el.status === 'New').length\n  }\n\n  return (\n    <>\n      <div>\n          <h3>New</h3>\n          {sortByStatus(issues).filter(el => el.status === 'New').map(issue => <IssueCard key={issue.id} data={issue} handleStatusChange={handleStatusChange}/>)}\n          {!hasNew() && \n          <div style={{margin: '15px', padding: '15px', textAlign: 'center'}}>\n            <p>✨ No new issues ✨</p>\n          </div>\n            \n          }\n      </div>\n      <hr/>\n      <div style={{marginTop: '20px'}}>\n          <h3>Previous</h3>\n          {sortByStatus(issues).filter(el => el.status !== 'New').map(issue => <IssueCard key={issue.id} data={issue} handleStatusChange={handleStatusChange}/>)}\n      </div>\n    </>\n  )\n}\n\nexport default IssueList","import React from 'react';\nimport './App.css';\nimport IssueList from './components/IssueList'\n\n\nfunction App() {\n  return (\n    <div>\n      <div>\n        <h2 style={{float: 'left'}}>\n          PROJECT KONDO\n        </h2>\n        <button \n          style={{float: 'right'}}\n          onClick = {\n            () => alert('⚒️ New Issue Form')\n          }\n        >\n          + Add\n        </button>\n        <div style={{clear: 'both'}}></div>\n      </div>\n      <p>\n        <IssueList/>\n      </p>\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}