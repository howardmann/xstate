{"ast":null,"code":"import { toInvokeSource, mapContext, isMachine } from './utils.js';\nimport { provide } from './serviceScope.js';\n\nfunction createNullActor(id) {\n  return {\n    id: id,\n    send: function () {\n      return void 0;\n    },\n    subscribe: function () {\n      return {\n        unsubscribe: function () {\n          return void 0;\n        }\n      };\n    },\n    toJSON: function () {\n      return {\n        id: id\n      };\n    }\n  };\n}\n/**\r\n * Creates a deferred actor that is able to be invoked given the provided\r\n * invocation information in its `.meta` value.\r\n *\r\n * @param invokeDefinition The meta information needed to invoke the actor.\r\n */\n\n\nfunction createInvocableActor(invokeDefinition, machine, context, _event) {\n  var _a;\n\n  var invokeSrc = toInvokeSource(invokeDefinition.src);\n  var serviceCreator = (_a = machine === null || machine === void 0 ? void 0 : machine.options.services) === null || _a === void 0 ? void 0 : _a[invokeSrc.type];\n  var resolvedData = invokeDefinition.data ? mapContext(invokeDefinition.data, context, _event) : undefined;\n  var tempActor = serviceCreator ? createDeferredActor(serviceCreator, invokeDefinition.id, resolvedData) : createNullActor(invokeDefinition.id);\n  tempActor.meta = invokeDefinition;\n  return tempActor;\n}\n\nfunction createDeferredActor(entity, id, data) {\n  var tempActor = createNullActor(id);\n  tempActor.deferred = true;\n\n  if (isMachine(entity)) {\n    // \"mute\" the existing service scope so potential spawned actors within the `.initialState` stay deferred here\n    tempActor.state = provide(undefined, function () {\n      return (data ? entity.withContext(data) : entity).initialState;\n    });\n  }\n\n  return tempActor;\n}\n\nfunction isActor(item) {\n  try {\n    return typeof item.send === 'function';\n  } catch (e) {\n    return false;\n  }\n}\n\nexport { createDeferredActor, createInvocableActor, createNullActor, isActor };","map":{"version":3,"sources":["/Users/howardmann/Howie/practice/xstate/kondo-decision/node_modules/xstate/es/Actor.js"],"names":["toInvokeSource","mapContext","isMachine","provide","createNullActor","id","send","subscribe","unsubscribe","toJSON","createInvocableActor","invokeDefinition","machine","context","_event","_a","invokeSrc","src","serviceCreator","options","services","type","resolvedData","data","undefined","tempActor","createDeferredActor","meta","entity","deferred","state","withContext","initialState","isActor","item","e"],"mappings":"AAAA,SAASA,cAAT,EAAyBC,UAAzB,EAAqCC,SAArC,QAAsD,YAAtD;AACA,SAASC,OAAT,QAAwB,mBAAxB;;AAEA,SAASC,eAAT,CAAyBC,EAAzB,EAA6B;AAC3B,SAAO;AACLA,IAAAA,EAAE,EAAEA,EADC;AAELC,IAAAA,IAAI,EAAE,YAAY;AAChB,aAAO,KAAK,CAAZ;AACD,KAJI;AAKLC,IAAAA,SAAS,EAAE,YAAY;AACrB,aAAO;AACLC,QAAAA,WAAW,EAAE,YAAY;AACvB,iBAAO,KAAK,CAAZ;AACD;AAHI,OAAP;AAKD,KAXI;AAYLC,IAAAA,MAAM,EAAE,YAAY;AAClB,aAAO;AACLJ,QAAAA,EAAE,EAAEA;AADC,OAAP;AAGD;AAhBI,GAAP;AAkBD;AACD;;;;;;;;AAQA,SAASK,oBAAT,CAA8BC,gBAA9B,EAAgDC,OAAhD,EAAyDC,OAAzD,EAAkEC,MAAlE,EAA0E;AACxE,MAAIC,EAAJ;;AAEA,MAAIC,SAAS,GAAGhB,cAAc,CAACW,gBAAgB,CAACM,GAAlB,CAA9B;AACA,MAAIC,cAAc,GAAG,CAACH,EAAE,GAAGH,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAK,KAAK,CAArC,GAAyC,KAAK,CAA9C,GAAkDA,OAAO,CAACO,OAAR,CAAgBC,QAAxE,MAAsF,IAAtF,IAA8FL,EAAE,KAAK,KAAK,CAA1G,GAA8G,KAAK,CAAnH,GAAuHA,EAAE,CAACC,SAAS,CAACK,IAAX,CAA9I;AACA,MAAIC,YAAY,GAAGX,gBAAgB,CAACY,IAAjB,GAAwBtB,UAAU,CAACU,gBAAgB,CAACY,IAAlB,EAAwBV,OAAxB,EAAiCC,MAAjC,CAAlC,GAA6EU,SAAhG;AACA,MAAIC,SAAS,GAAGP,cAAc,GAAGQ,mBAAmB,CAACR,cAAD,EAAiBP,gBAAgB,CAACN,EAAlC,EAAsCiB,YAAtC,CAAtB,GAA4ElB,eAAe,CAACO,gBAAgB,CAACN,EAAlB,CAAzH;AACAoB,EAAAA,SAAS,CAACE,IAAV,GAAiBhB,gBAAjB;AACA,SAAOc,SAAP;AACD;;AAED,SAASC,mBAAT,CAA6BE,MAA7B,EAAqCvB,EAArC,EAAyCkB,IAAzC,EAA+C;AAC7C,MAAIE,SAAS,GAAGrB,eAAe,CAACC,EAAD,CAA/B;AACAoB,EAAAA,SAAS,CAACI,QAAV,GAAqB,IAArB;;AAEA,MAAI3B,SAAS,CAAC0B,MAAD,CAAb,EAAuB;AACrB;AACAH,IAAAA,SAAS,CAACK,KAAV,GAAkB3B,OAAO,CAACqB,SAAD,EAAY,YAAY;AAC/C,aAAO,CAACD,IAAI,GAAGK,MAAM,CAACG,WAAP,CAAmBR,IAAnB,CAAH,GAA8BK,MAAnC,EAA2CI,YAAlD;AACD,KAFwB,CAAzB;AAGD;;AAED,SAAOP,SAAP;AACD;;AAED,SAASQ,OAAT,CAAiBC,IAAjB,EAAuB;AACrB,MAAI;AACF,WAAO,OAAOA,IAAI,CAAC5B,IAAZ,KAAqB,UAA5B;AACD,GAFD,CAEE,OAAO6B,CAAP,EAAU;AACV,WAAO,KAAP;AACD;AACF;;AAED,SAAST,mBAAT,EAA8BhB,oBAA9B,EAAoDN,eAApD,EAAqE6B,OAArE","sourcesContent":["import { toInvokeSource, mapContext, isMachine } from './utils.js';\nimport { provide } from './serviceScope.js';\n\nfunction createNullActor(id) {\n  return {\n    id: id,\n    send: function () {\n      return void 0;\n    },\n    subscribe: function () {\n      return {\n        unsubscribe: function () {\n          return void 0;\n        }\n      };\n    },\n    toJSON: function () {\n      return {\n        id: id\n      };\n    }\n  };\n}\n/**\r\n * Creates a deferred actor that is able to be invoked given the provided\r\n * invocation information in its `.meta` value.\r\n *\r\n * @param invokeDefinition The meta information needed to invoke the actor.\r\n */\n\n\nfunction createInvocableActor(invokeDefinition, machine, context, _event) {\n  var _a;\n\n  var invokeSrc = toInvokeSource(invokeDefinition.src);\n  var serviceCreator = (_a = machine === null || machine === void 0 ? void 0 : machine.options.services) === null || _a === void 0 ? void 0 : _a[invokeSrc.type];\n  var resolvedData = invokeDefinition.data ? mapContext(invokeDefinition.data, context, _event) : undefined;\n  var tempActor = serviceCreator ? createDeferredActor(serviceCreator, invokeDefinition.id, resolvedData) : createNullActor(invokeDefinition.id);\n  tempActor.meta = invokeDefinition;\n  return tempActor;\n}\n\nfunction createDeferredActor(entity, id, data) {\n  var tempActor = createNullActor(id);\n  tempActor.deferred = true;\n\n  if (isMachine(entity)) {\n    // \"mute\" the existing service scope so potential spawned actors within the `.initialState` stay deferred here\n    tempActor.state = provide(undefined, function () {\n      return (data ? entity.withContext(data) : entity).initialState;\n    });\n  }\n\n  return tempActor;\n}\n\nfunction isActor(item) {\n  try {\n    return typeof item.send === 'function';\n  } catch (e) {\n    return false;\n  }\n}\n\nexport { createDeferredActor, createInvocableActor, createNullActor, isActor };"]},"metadata":{},"sourceType":"module"}