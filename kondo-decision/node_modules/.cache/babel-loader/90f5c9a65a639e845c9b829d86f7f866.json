{"ast":null,"code":"var _jsxFileName = \"/Users/howardmann/Howie/practice/xstate/kondo-decision/src/components/IssueList.js\";\nimport React from 'react';\nimport IssueCard from './IssueCard';\nimport { sortBy } from 'lodash';\nconst initialData = [{\n  id: '1',\n  name: 'Excessive operation',\n  status: 'In Progress',\n  assignee: 'bill'\n}, {\n  id: '2',\n  name: 'Status Mismatch',\n  status: 'New',\n  assignee: 'bob'\n}, {\n  id: '3',\n  name: 'Food court open',\n  status: 'Resolved',\n  assignee: 'jane'\n}, {\n  id: '4',\n  name: 'Magic mountain',\n  status: 'New',\n  assignee: 'billy'\n}, {\n  id: '5',\n  name: 'Turn gas office',\n  status: 'Not Doing',\n  assignee: 'jason'\n}, {\n  id: '6',\n  name: 'Stage 4 Restriction',\n  status: 'On Hold',\n  assignee: 'teddy'\n}];\n\nconst sortByStatus = data => {\n  const sortRank = {\n    \"New\": 1,\n    \"In Progress\": 2,\n    \"On Hold\": 3,\n    \"Resolved\": 4,\n    \"Not Doing\": 5\n  };\n  return sortBy(data, function (el) {\n    return sortRank[el.status];\n  });\n};\n\nconst IssueList = ({\n  data = initialData\n}) => {\n  // React Issue State\n  const [issues, setIssues] = React.useState(data);\n\n  const handleStatusChange = (id, status) => {\n    setIssues(issues.map(issue => {\n      if (issue.id === id) {\n        return { ...issue,\n          status\n        };\n      }\n\n      return issue;\n    }));\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 5\n    }\n  }, sortByStatus(issues).map(issue => /*#__PURE__*/React.createElement(IssueCard, {\n    data: issue,\n    handleStatusChange: handleStatusChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 44\n    }\n  })));\n};\n\nexport default IssueList;","map":{"version":3,"sources":["/Users/howardmann/Howie/practice/xstate/kondo-decision/src/components/IssueList.js"],"names":["React","IssueCard","sortBy","initialData","id","name","status","assignee","sortByStatus","data","sortRank","el","IssueList","issues","setIssues","useState","handleStatusChange","map","issue"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,SAAQC,MAAR,QAAqB,QAArB;AAEA,MAAMC,WAAW,GAAG,CAClB;AACEC,EAAAA,EAAE,EAAE,GADN;AAEEC,EAAAA,IAAI,EAAE,qBAFR;AAGEC,EAAAA,MAAM,EAAE,aAHV;AAIEC,EAAAA,QAAQ,EAAE;AAJZ,CADkB,EAOlB;AACEH,EAAAA,EAAE,EAAE,GADN;AAEEC,EAAAA,IAAI,EAAE,iBAFR;AAGEC,EAAAA,MAAM,EAAE,KAHV;AAIEC,EAAAA,QAAQ,EAAE;AAJZ,CAPkB,EAalB;AACEH,EAAAA,EAAE,EAAE,GADN;AAEEC,EAAAA,IAAI,EAAE,iBAFR;AAGEC,EAAAA,MAAM,EAAE,UAHV;AAIEC,EAAAA,QAAQ,EAAE;AAJZ,CAbkB,EAmBlB;AACEH,EAAAA,EAAE,EAAE,GADN;AAEEC,EAAAA,IAAI,EAAE,gBAFR;AAGEC,EAAAA,MAAM,EAAE,KAHV;AAIEC,EAAAA,QAAQ,EAAE;AAJZ,CAnBkB,EAyBlB;AACEH,EAAAA,EAAE,EAAE,GADN;AAEEC,EAAAA,IAAI,EAAE,iBAFR;AAGEC,EAAAA,MAAM,EAAE,WAHV;AAIEC,EAAAA,QAAQ,EAAE;AAJZ,CAzBkB,EA+BlB;AACEH,EAAAA,EAAE,EAAE,GADN;AAEEC,EAAAA,IAAI,EAAE,qBAFR;AAGEC,EAAAA,MAAM,EAAE,SAHV;AAIEC,EAAAA,QAAQ,EAAE;AAJZ,CA/BkB,CAApB;;AAuCA,MAAMC,YAAY,GAAIC,IAAD,IAAU;AAC7B,QAAMC,QAAQ,GAAG;AACf,WAAO,CADQ;AAEf,mBAAe,CAFA;AAGf,eAAW,CAHI;AAIf,gBAAY,CAJG;AAKf,iBAAa;AALE,GAAjB;AAQA,SAAOR,MAAM,CAACO,IAAD,EAAO,UAASE,EAAT,EAAY;AAC9B,WAAOD,QAAQ,CAACC,EAAE,CAACL,MAAJ,CAAf;AACD,GAFY,CAAb;AAGD,CAZD;;AAeA,MAAMM,SAAS,GAAG,CAAC;AAACH,EAAAA,IAAI,GAAGN;AAAR,CAAD,KAA0B;AAC1C;AACA,QAAM,CAACU,MAAD,EAASC,SAAT,IAAsBd,KAAK,CAACe,QAAN,CAAeN,IAAf,CAA5B;;AAEA,QAAMO,kBAAkB,GAAG,CAACZ,EAAD,EAAKE,MAAL,KAAgB;AACzCQ,IAAAA,SAAS,CACPD,MAAM,CAACI,GAAP,CAAWC,KAAK,IAAI;AAClB,UAAGA,KAAK,CAACd,EAAN,KAAaA,EAAhB,EAAmB;AACjB,eAAO,EAAC,GAAGc,KAAJ;AAAWZ,UAAAA;AAAX,SAAP;AACD;;AACD,aAAOY,KAAP;AACD,KALD,CADO,CAAT;AAOD,GARD;;AAUA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKV,YAAY,CAACK,MAAD,CAAZ,CAAqBI,GAArB,CAAyBC,KAAK,iBAAI,oBAAC,SAAD;AAAW,IAAA,IAAI,EAAEA,KAAjB;AAAwB,IAAA,kBAAkB,EAAEF,kBAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAlC,CADL,CADF;AAKD,CAnBD;;AAqBA,eAAeJ,SAAf","sourcesContent":["import React from 'react';\nimport IssueCard from './IssueCard'\nimport {sortBy} from 'lodash';\n\nconst initialData = [\n  {\n    id: '1',\n    name: 'Excessive operation',\n    status: 'In Progress',\n    assignee: 'bill'\n  },\n  {\n    id: '2',\n    name: 'Status Mismatch',\n    status: 'New',\n    assignee: 'bob'\n  },\n  {\n    id: '3',\n    name: 'Food court open',\n    status: 'Resolved',\n    assignee: 'jane'\n  },\n  {\n    id: '4',\n    name: 'Magic mountain',\n    status: 'New',\n    assignee: 'billy'\n  },\n  {\n    id: '5',\n    name: 'Turn gas office',\n    status: 'Not Doing',\n    assignee: 'jason'\n  },\n  {\n    id: '6',\n    name: 'Stage 4 Restriction',\n    status: 'On Hold',\n    assignee: 'teddy'\n  }\n]\n\nconst sortByStatus = (data) => {\n  const sortRank = {\n    \"New\": 1,\n    \"In Progress\": 2,\n    \"On Hold\": 3,\n    \"Resolved\": 4,\n    \"Not Doing\": 5\n  }\n\n  return sortBy(data, function(el){\n    return sortRank[el.status]\n  })\n}\n\n\nconst IssueList = ({data = initialData}) => {\n  // React Issue State\n  const [issues, setIssues] = React.useState(data)\n  \n  const handleStatusChange = (id, status) => {\n    setIssues(\n      issues.map(issue => {\n        if(issue.id === id){\n          return {...issue, status}\n        }\n        return issue\n      }))\n  }\n\n  return (\n    <div>\n        {sortByStatus(issues).map(issue => <IssueCard data={issue} handleStatusChange={handleStatusChange}/>)}\n    </div>\n  )\n}\n\nexport default IssueList"]},"metadata":{},"sourceType":"module"}