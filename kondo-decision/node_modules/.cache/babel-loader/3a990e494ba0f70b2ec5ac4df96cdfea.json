{"ast":null,"code":"import { __spread, __rest, __assign } from './_virtual/_tslib.js';\nimport { EMPTY_ACTIVITY_MAP } from './constants.js';\nimport { isString, matchesState, keys } from './utils.js';\nimport { nextEvents } from './stateUtils.js';\nimport { initEvent } from './actions.js';\n\nfunction stateValuesEqual(a, b) {\n  if (a === b) {\n    return true;\n  }\n\n  if (a === undefined || b === undefined) {\n    return false;\n  }\n\n  if (isString(a) || isString(b)) {\n    return a === b;\n  }\n\n  var aKeys = keys(a);\n  var bKeys = keys(b);\n  return aKeys.length === bKeys.length && aKeys.every(function (key) {\n    return stateValuesEqual(a[key], b[key]);\n  });\n}\n\nfunction isState(state) {\n  if (isString(state)) {\n    return false;\n  }\n\n  return 'value' in state && 'history' in state;\n}\n\nfunction bindActionToState(action, state) {\n  var exec = action.exec;\n\n  var boundAction = __assign(__assign({}, action), {\n    exec: exec !== undefined ? function () {\n      return exec(state.context, state.event, {\n        action: action,\n        state: state,\n        _event: state._event\n      });\n    } : undefined\n  });\n\n  return boundAction;\n}\n\nvar State =\n/*#__PURE__*/\n\n/** @class */\nfunction () {\n  /**\r\n   * Creates a new State instance.\r\n   * @param value The state value\r\n   * @param context The extended state\r\n   * @param historyValue The tree representing historical values of the state nodes\r\n   * @param history The previous state\r\n   * @param actions An array of action objects to execute as side-effects\r\n   * @param activities A mapping of activities and whether they are started (`true`) or stopped (`false`).\r\n   * @param meta\r\n   * @param events Internal event queue. Should be empty with run-to-completion semantics.\r\n   * @param configuration\r\n   */\n  function State(config) {\n    var _this = this;\n\n    this.actions = [];\n    this.activities = EMPTY_ACTIVITY_MAP;\n    this.meta = {};\n    this.events = [];\n    this.value = config.value;\n    this.context = config.context;\n    this._event = config._event;\n    this._sessionid = config._sessionid;\n    this.event = this._event.data;\n    this.historyValue = config.historyValue;\n    this.history = config.history;\n    this.actions = config.actions || [];\n    this.activities = config.activities || EMPTY_ACTIVITY_MAP;\n    this.meta = config.meta || {};\n    this.events = config.events || [];\n    this.matches = this.matches.bind(this);\n    this.toStrings = this.toStrings.bind(this);\n    this.configuration = config.configuration;\n    this.transitions = config.transitions;\n    this.children = config.children;\n    this.done = !!config.done;\n    Object.defineProperty(this, 'nextEvents', {\n      get: function () {\n        return nextEvents(_this.configuration);\n      }\n    });\n  }\n  /**\r\n   * Creates a new State instance for the given `stateValue` and `context`.\r\n   * @param stateValue\r\n   * @param context\r\n   */\n\n\n  State.from = function (stateValue, context) {\n    if (stateValue instanceof State) {\n      if (stateValue.context !== context) {\n        return new State({\n          value: stateValue.value,\n          context: context,\n          _event: stateValue._event,\n          _sessionid: null,\n          historyValue: stateValue.historyValue,\n          history: stateValue.history,\n          actions: [],\n          activities: stateValue.activities,\n          meta: {},\n          events: [],\n          configuration: [],\n          transitions: [],\n          children: {}\n        });\n      }\n\n      return stateValue;\n    }\n\n    var _event = initEvent;\n    return new State({\n      value: stateValue,\n      context: context,\n      _event: _event,\n      _sessionid: null,\n      historyValue: undefined,\n      history: undefined,\n      actions: [],\n      activities: undefined,\n      meta: undefined,\n      events: [],\n      configuration: [],\n      transitions: [],\n      children: {}\n    });\n  };\n  /**\r\n   * Creates a new State instance for the given `config`.\r\n   * @param config The state config\r\n   */\n\n\n  State.create = function (config) {\n    return new State(config);\n  };\n  /**\r\n   * Creates a new `State` instance for the given `stateValue` and `context` with no actions (side-effects).\r\n   * @param stateValue\r\n   * @param context\r\n   */\n\n\n  State.inert = function (stateValue, context) {\n    if (stateValue instanceof State) {\n      if (!stateValue.actions.length) {\n        return stateValue;\n      }\n\n      var _event = initEvent;\n      return new State({\n        value: stateValue.value,\n        context: context,\n        _event: _event,\n        _sessionid: null,\n        historyValue: stateValue.historyValue,\n        history: stateValue.history,\n        activities: stateValue.activities,\n        configuration: stateValue.configuration,\n        transitions: [],\n        children: {}\n      });\n    }\n\n    return State.from(stateValue, context);\n  };\n  /**\r\n   * Returns an array of all the string leaf state node paths.\r\n   * @param stateValue\r\n   * @param delimiter The character(s) that separate each subpath in the string state node path.\r\n   */\n\n\n  State.prototype.toStrings = function (stateValue, delimiter) {\n    var _this = this;\n\n    if (stateValue === void 0) {\n      stateValue = this.value;\n    }\n\n    if (delimiter === void 0) {\n      delimiter = '.';\n    }\n\n    if (isString(stateValue)) {\n      return [stateValue];\n    }\n\n    var valueKeys = keys(stateValue);\n    return valueKeys.concat.apply(valueKeys, __spread(valueKeys.map(function (key) {\n      return _this.toStrings(stateValue[key], delimiter).map(function (s) {\n        return key + delimiter + s;\n      });\n    })));\n  };\n\n  State.prototype.toJSON = function () {\n    var _a = this,\n        configuration = _a.configuration,\n        transitions = _a.transitions,\n        jsonValues = __rest(_a, [\"configuration\", \"transitions\"]);\n\n    return jsonValues;\n  };\n  /**\r\n   * Whether the current state value is a subset of the given parent state value.\r\n   * @param parentStateValue\r\n   */\n\n\n  State.prototype.matches = function (parentStateValue) {\n    return matchesState(parentStateValue, this.value);\n  };\n\n  return State;\n}();\n\nexport { State, bindActionToState, isState, stateValuesEqual };","map":{"version":3,"sources":["/Users/howardmann/Howie/practice/xstate/kondo-decision/node_modules/xstate/es/State.js"],"names":["__spread","__rest","__assign","EMPTY_ACTIVITY_MAP","isString","matchesState","keys","nextEvents","initEvent","stateValuesEqual","a","b","undefined","aKeys","bKeys","length","every","key","isState","state","bindActionToState","action","exec","boundAction","context","event","_event","State","config","_this","actions","activities","meta","events","value","_sessionid","data","historyValue","history","matches","bind","toStrings","configuration","transitions","children","done","Object","defineProperty","get","from","stateValue","create","inert","prototype","delimiter","valueKeys","concat","apply","map","s","toJSON","_a","jsonValues","parentStateValue"],"mappings":"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","sourcesContent":["import { __spread, __rest, __assign } from './_virtual/_tslib.js';\nimport { EMPTY_ACTIVITY_MAP } from './constants.js';\nimport { isString, matchesState, keys } from './utils.js';\nimport { nextEvents } from './stateUtils.js';\nimport { initEvent } from './actions.js';\n\nfunction stateValuesEqual(a, b) {\n  if (a === b) {\n    return true;\n  }\n\n  if (a === undefined || b === undefined) {\n    return false;\n  }\n\n  if (isString(a) || isString(b)) {\n    return a === b;\n  }\n\n  var aKeys = keys(a);\n  var bKeys = keys(b);\n  return aKeys.length === bKeys.length && aKeys.every(function (key) {\n    return stateValuesEqual(a[key], b[key]);\n  });\n}\n\nfunction isState(state) {\n  if (isString(state)) {\n    return false;\n  }\n\n  return 'value' in state && 'history' in state;\n}\n\nfunction bindActionToState(action, state) {\n  var exec = action.exec;\n\n  var boundAction = __assign(__assign({}, action), {\n    exec: exec !== undefined ? function () {\n      return exec(state.context, state.event, {\n        action: action,\n        state: state,\n        _event: state._event\n      });\n    } : undefined\n  });\n\n  return boundAction;\n}\n\nvar State =\n/*#__PURE__*/\n\n/** @class */\nfunction () {\n  /**\r\n   * Creates a new State instance.\r\n   * @param value The state value\r\n   * @param context The extended state\r\n   * @param historyValue The tree representing historical values of the state nodes\r\n   * @param history The previous state\r\n   * @param actions An array of action objects to execute as side-effects\r\n   * @param activities A mapping of activities and whether they are started (`true`) or stopped (`false`).\r\n   * @param meta\r\n   * @param events Internal event queue. Should be empty with run-to-completion semantics.\r\n   * @param configuration\r\n   */\n  function State(config) {\n    var _this = this;\n\n    this.actions = [];\n    this.activities = EMPTY_ACTIVITY_MAP;\n    this.meta = {};\n    this.events = [];\n    this.value = config.value;\n    this.context = config.context;\n    this._event = config._event;\n    this._sessionid = config._sessionid;\n    this.event = this._event.data;\n    this.historyValue = config.historyValue;\n    this.history = config.history;\n    this.actions = config.actions || [];\n    this.activities = config.activities || EMPTY_ACTIVITY_MAP;\n    this.meta = config.meta || {};\n    this.events = config.events || [];\n    this.matches = this.matches.bind(this);\n    this.toStrings = this.toStrings.bind(this);\n    this.configuration = config.configuration;\n    this.transitions = config.transitions;\n    this.children = config.children;\n    this.done = !!config.done;\n    Object.defineProperty(this, 'nextEvents', {\n      get: function () {\n        return nextEvents(_this.configuration);\n      }\n    });\n  }\n  /**\r\n   * Creates a new State instance for the given `stateValue` and `context`.\r\n   * @param stateValue\r\n   * @param context\r\n   */\n\n\n  State.from = function (stateValue, context) {\n    if (stateValue instanceof State) {\n      if (stateValue.context !== context) {\n        return new State({\n          value: stateValue.value,\n          context: context,\n          _event: stateValue._event,\n          _sessionid: null,\n          historyValue: stateValue.historyValue,\n          history: stateValue.history,\n          actions: [],\n          activities: stateValue.activities,\n          meta: {},\n          events: [],\n          configuration: [],\n          transitions: [],\n          children: {}\n        });\n      }\n\n      return stateValue;\n    }\n\n    var _event = initEvent;\n    return new State({\n      value: stateValue,\n      context: context,\n      _event: _event,\n      _sessionid: null,\n      historyValue: undefined,\n      history: undefined,\n      actions: [],\n      activities: undefined,\n      meta: undefined,\n      events: [],\n      configuration: [],\n      transitions: [],\n      children: {}\n    });\n  };\n  /**\r\n   * Creates a new State instance for the given `config`.\r\n   * @param config The state config\r\n   */\n\n\n  State.create = function (config) {\n    return new State(config);\n  };\n  /**\r\n   * Creates a new `State` instance for the given `stateValue` and `context` with no actions (side-effects).\r\n   * @param stateValue\r\n   * @param context\r\n   */\n\n\n  State.inert = function (stateValue, context) {\n    if (stateValue instanceof State) {\n      if (!stateValue.actions.length) {\n        return stateValue;\n      }\n\n      var _event = initEvent;\n      return new State({\n        value: stateValue.value,\n        context: context,\n        _event: _event,\n        _sessionid: null,\n        historyValue: stateValue.historyValue,\n        history: stateValue.history,\n        activities: stateValue.activities,\n        configuration: stateValue.configuration,\n        transitions: [],\n        children: {}\n      });\n    }\n\n    return State.from(stateValue, context);\n  };\n  /**\r\n   * Returns an array of all the string leaf state node paths.\r\n   * @param stateValue\r\n   * @param delimiter The character(s) that separate each subpath in the string state node path.\r\n   */\n\n\n  State.prototype.toStrings = function (stateValue, delimiter) {\n    var _this = this;\n\n    if (stateValue === void 0) {\n      stateValue = this.value;\n    }\n\n    if (delimiter === void 0) {\n      delimiter = '.';\n    }\n\n    if (isString(stateValue)) {\n      return [stateValue];\n    }\n\n    var valueKeys = keys(stateValue);\n    return valueKeys.concat.apply(valueKeys, __spread(valueKeys.map(function (key) {\n      return _this.toStrings(stateValue[key], delimiter).map(function (s) {\n        return key + delimiter + s;\n      });\n    })));\n  };\n\n  State.prototype.toJSON = function () {\n    var _a = this,\n        configuration = _a.configuration,\n        transitions = _a.transitions,\n        jsonValues = __rest(_a, [\"configuration\", \"transitions\"]);\n\n    return jsonValues;\n  };\n  /**\r\n   * Whether the current state value is a subset of the given parent state value.\r\n   * @param parentStateValue\r\n   */\n\n\n  State.prototype.matches = function (parentStateValue) {\n    return matchesState(parentStateValue, this.value);\n  };\n\n  return State;\n}();\n\nexport { State, bindActionToState, isState, stateValuesEqual };"]},"metadata":{},"sourceType":"module"}