{"ast":null,"code":"import { Machine, assign } from 'xstate';\n\nconst isNew = ctx => ctx.status === 'New';\n\nconst isInProgress = ctx => ctx.status === 'In Progress';\n\nconst isResolved = ctx => ctx.status === 'Resolved';\n\nconst isOnHold = ctx => ctx.status === 'On Hold';\n\nconst isNotDoing = ctx => ctx.status === 'Not Doing';\n\nconst actionMachine = Machine({\n  id: 'machine',\n  initial: 'status',\n  context: {\n    status: 'In Progress'\n  },\n  states: {\n    status: {\n      initial: 'boot',\n      states: {\n        boot: {\n          on: {\n            INIT: [{\n              target: 'new',\n              cond: ctx => isNew(ctx)\n            }, {\n              target: 'inProgress',\n              cond: ctx => isInProgress(ctx)\n            }, {\n              target: 'resolved',\n              cond: ctx => isResolved(ctx)\n            }, {\n              target: 'onHold',\n              cond: ctx => isOnHold(ctx)\n            }, {\n              target: 'notDoing',\n              cond: ctx => isNotDoing(ctx)\n            }]\n          }\n        },\n        new: {\n          on: {\n            APPROVE: 'inProgress',\n            REJECT: 'notDoing',\n            HOLD: 'onHold'\n          },\n          entry: assign({\n            status: 'New'\n          })\n        },\n        inProgress: {\n          on: {\n            REJECT: 'notDoing',\n            HOLD: 'onHold',\n            RESOLVED: 'resolved'\n          },\n          entry: assign({\n            status: 'In Progress'\n          })\n        },\n        onHold: {\n          on: {\n            APPROVE: 'inProgress',\n            REJECT: 'notDoing'\n          },\n          entry: assign({\n            status: 'On Hold'\n          })\n        },\n        notDoing: {\n          on: {\n            APPROVE: 'inProgress',\n            HOLD: 'onHold'\n          },\n          entry: assign({\n            status: 'Not Doing'\n          })\n        },\n        resolved: {\n          type: 'final',\n          entry: assign({\n            status: 'Resolved'\n          })\n        }\n      }\n    }\n  }\n});\nexport default actionMachine;","map":{"version":3,"sources":["/Users/howardmann/Howie/practice/xstate/kondo-decision/src/stateMachines/actionMachine.js"],"names":["Machine","assign","isNew","ctx","status","isInProgress","isResolved","isOnHold","isNotDoing","actionMachine","id","initial","context","states","boot","on","INIT","target","cond","new","APPROVE","REJECT","HOLD","entry","inProgress","RESOLVED","onHold","notDoing","resolved","type"],"mappings":"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","sourcesContent":["import {Machine, assign} from 'xstate'\n\nconst isNew = (ctx) => ctx.status === 'New'\nconst isInProgress = (ctx) => ctx.status === 'In Progress'\nconst isResolved = (ctx) => ctx.status === 'Resolved'\nconst isOnHold = (ctx) => ctx.status === 'On Hold'\nconst isNotDoing = (ctx) => ctx.status === 'Not Doing'\n\n\nconst actionMachine = Machine({\n  id: 'machine',\n  initial: 'status',\n  context: {\n    status: 'In Progress'\n  },\n  states: {\n    status: {\n      initial: 'boot',\n      states: {\n        boot: {\n          on: {\n            INIT: [{\n                target: 'new',\n                cond: ctx => isNew(ctx)\n              },\n              {\n                target: 'inProgress',\n                cond: ctx => isInProgress(ctx)\n              },\n              {\n                target: 'resolved',\n                cond: ctx => isResolved(ctx)\n              },\n              {\n                target: 'onHold',\n                cond: ctx => isOnHold(ctx)\n              },\n              {\n                target: 'notDoing',\n                cond: ctx => isNotDoing(ctx)\n              }\n            ]\n          }\n        },\n        new: {\n          on: {\n            APPROVE: 'inProgress',\n            REJECT: 'notDoing',\n            HOLD: 'onHold'\n          },\n          entry: assign({\n            status: 'New'\n          })\n        },\n        inProgress: {\n          on: {\n            REJECT: 'notDoing',\n            HOLD: 'onHold',\n            RESOLVED: 'resolved'\n          },\n          entry: assign({\n            status: 'In Progress'\n          })\n        },\n        onHold: {\n          on: {\n            APPROVE: 'inProgress',\n            REJECT: 'notDoing'\n          },\n          entry: assign({\n            status: 'On Hold'\n          })\n        },\n        notDoing: {\n          on: {\n            APPROVE: 'inProgress',\n            HOLD: 'onHold'\n          },\n          entry: assign({\n            status: 'Not Doing'\n          })\n        },\n        resolved: {\n          type: 'final',\n          entry: assign({\n            status: 'Resolved'\n          })\n        }\n      }\n    }\n  }\n});\n\n\nexport default actionMachine"]},"metadata":{},"sourceType":"module"}